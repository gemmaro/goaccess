.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH goaccess 1 2024年5月 GNU+Linux 利用者の手引
.SH 名称
goaccess \- 高速なwebログ解析器と対話的な閲覧器
.SH 処方
.LP
\fBgoaccess [ファイル名] [オプション...] [\-c][\-M][\-H][\-q][\-d][...]\fP
.SH 説明
\fBgoaccess\fP GoAccessはオープンソースの実時間webログ解析器と対話的な閲覧器を兼ねており、
*nixシステムの\fI端末\fPや\fIブラウザ\fP上で走ります。
.P
サーバーレポートで思うがままにデータの可視化を行う必要があるシステム管理者のために、
高速で価値のあるHTTPの統計情報を提供します。
.P
GoAccessは指定されたwebログファイルを解析しX端末にデータを出力します。
含まれている機能は以下です：

.IP 一般的な統計：
このパネルにはいくつかの指標の概要があります。
妥当ないし不当なリクエストの数、
データセットの解析所要時間、
正味訪問者数、
リクエストされたファイル、
静的ファイル（CSS、ICO、JPGなど）のHTTPリファラ、
404、
そして解析されたログファイルの大きさ、
さらに帯域幅の消費量といったものです。
.IP 正味訪問者
このパネルにはヒット数、正味訪問者、日次累積帯域幅といった指標が示されます。
.IP
おまけとして日付での指定は\fI\-\-date\-spec=hr\fPを使って時単位に設定することにより、
05/Jun/2016:16のような日付を表示できます。
もしくは分単位にすることで05/Jun/2016:16:59になります。
時単位ないし分単位で日次トラフィックを把握したいときは威力を発揮します。
.IP リクエストされたファイル
このパネルにはwebサーバーにリクエストされた（静的でない）ファイルのほとんどが表示されます。
ヒット数、正味訪問者、比率と共に、使用された累積帯域幅、プロトコル、リクエストメソッドが示されます。
.IP リクエストされた静的ファイル
JPG、CSS、SWF、JS、GIF、PNGファイル種のような頻出の静的ファイルを一覧にしつつ、
上のリクエストされたファイルのパネルと同じ指標も備わります。
静的ファイルの種類を設定ファイルに加えることができます。
.IP "404ないしNot Found"
前述のリクエストパネルと同じ指標を表示します。
ただしこちらはサーバーで見当たらなかったり、
一般に404ステータスコードとして知られているデータが含まれます。
.IP ホスト
このパネルにはホスト自体についての詳細情報が載っています。
これにより容易に攻撃的なクローラーに焦点を当てたり、
帯域幅を貪るホストを同定することができます。

パネルを拡大することでホストのリバースDNS探知結果や身元の国家や、
市といった追加情報を表示できます。
\fI\-a\fP引数が有効であれば所望のIPアドレスを選択してエンターを打つことで、
ユーザーエージェントを表示させられます。
.IP オペレーティングシステム
このパネルではサーバーをヒットするときにホストがどのオペレーティングシステムを用いたかが報告されます。
それぞれのオペレーティングシステムの可能な限り最も細かいバージョンが呈示されます。
.IP ブラウザ
このパネルにはサーバーをヒットした際にホストがどのブラウザを用いたかを報告します。
それぞれのブラウザの可能な限り最も細かいバージョンが呈示されます。
.IP 訪問時刻
このパネルには時単位のレポートが表示されます。
このオプションでは24個のデータ点が表示され、1つにつき1日のうちの各1時間が充てられます。
.IP
おまけとして、時指定は\fI\-\-hour\-spec=min\fPを使うことで時単位の10分の1に設定することができ、
時間は16:4として表示されます。
これはサーバーのトラフィックのピークに焦点を当てたいときに効果を発揮します。
.IP 仮想ホスト
このパネルにはアクセスログから解析された全ての各仮想ホストが表示されます。
このパネルはログ書式文字列中に\fI%v\fPが使われたときに表示されます。
.IP リファラのURL
問題のホストが他のリソースを介してアクセスされた場合、
もしくは別のホストからリンクないし転換された場合、
このパネル中に参照元のURLが呈示されます。
有効にするには設定ファイル中の`\-\-ignore\-panel`を参照してください。
既定では\fI無効\fPになっています。
.IP 参照サイト
このパネルにはURL全体ではなくホスト部分のみが表示されます。
このURLはリクエストの出自です。
.IP キーフレーズ
サーバーに導いたGoogle検索、Googleキャッシュ、
Google翻訳で使われたキーフレーズが報告されます。
現時点ではHTTPを介したGoogle検索問い合せのみに対応しています。
有効にするには設定ファイル中の`\-\-ignore\-panel`を参照してください。
既定では\fI無効\fPになっています。
.IP 地理的位置
IPアドレスが地理的にどこに位置しているかを定められます。
統計は大陸と国家に細分化されます。
GeoLocation対応とともにコンパイルする必要があります。
.IP HTTPステータスコード
HTTPリクエストに対する数値的なステータスコードの値です。
.IP ASN
このパネルにはGeoIP2と旧式のデータベース用にASN (Autonomous System Numbers) のデータが表示されます。
悪意のあるトラフィックを検知しそれに伴ってブロックするのに優れています。
.IP リモートユーザー（HTTP認証）
HTTP認証により定められるような、文書をリクエストする人物の利用者IDがこれです。
文書がパスワードで保護されていなければ前のものと同様にこの部分は"\-"になります。
このパネルはログ書式変数中に\fI%e\fPが与えられていなければ有効になりません。
.IP キャッシュ状態
サーバーでキャッシュを使っているとき、
リクエストがキャッシュされたりキャッシュからリクエストに応答したりしているかどうかを、
知りたくなるときがくるかもしれません。
このパネルはサーバーが供したオブジェクトのキャッシュ状態を示します。
このパネルはログ書式変数中で\fI%C\fPが与えられない限り有効にはされません。
状態は`MISS`、`BYPASS`、`EXPIRED`、`STALE`、`UPDATING`、`REVALIDATED`、`HIT`のいずれかです。
.IP MIME種別
このパネルには割り当てられたメディア種別（正式にはMIME種別として知られます）とメディア副種別が指定されており、
その下に一覧になっています。
このパネルはログ書式変数中に\fI%M\fPが与えられていない限り有効になりません。
詳細は https://www.iana.org/assignments/media\-types/media\-types.xhtml
を参照してください。
.IP 暗号化設定
このパネルには暗号スート間で使用されたSSL/TLSプロトコルが示されます。
このパネルはログ書式変数中で\fI%K\fPが与えられていない限り有効ではありません。

.P
\fI補足：\fPおまけで、設定された際には、
全てのパネルへリクエストに対応するのに掛かった平均時間を表示することができます。

.SH 容量
.P
GoAccessで使うことができる容量オプションは3つあります。
環境と要件により選択は変わってきます。
.TP 
既定のハッシュテーブル
インメモリ容量はデータセットの大きさを利用できる物理記憶容量に制限するコストと引き換えに、
よりよいパフォーマンスが得られます。
GoAccessはインメモリハッシュテーブルを使用します。
とても多いメモリ使用でかなり良いパフォーマンスを発揮します。
この容量はディスク上の永続性に対応します。
.SH コンパイル時の設定
.P
GoAccessのコンパイル時の設定ではいくつかのオプションを使うことができます。
完全な最新の設定オプションの一覧については\fI./configure \-\-help\fPを走らせてください。
.TP 
\fB\-\-enable\-debug\fP
デバッグシンボル有りでコンパイルし、
コンパイラの最適化を切ります。
.TP 
\fB\-\-enable\-utf8\fP
全角文字対応有りでコンパイルします。
Ncurseswが必要です。
.TP 
\fB\-\-enable\-geoip=<legacy|mmdb>\fP
GeoLocation対応有りでコンパイルします。
MaxMindのGeoIPが必要です。
\fIlegacy\fPは元来のGeoIPデータベースを使用します。
\fImmdb\fPは改善されたGeoIP2データベースを使用します。
.TP 
\fB\-\-with\-getline\fP
4096の固定大バッファを使う代わりに、フルラインリクエストを解析するために動的にラインバッファを拡張します。
.TP 
\fB\-\-with\-openssl\fP
WebSocketサーバー用にGoAccessをOpenSSL対応付きでコンパイルします。
.SH オプション
.P
以下のオプションはコマンドに与えたり設定ファイルで指定したりできます。
設定ファイルで指定された場合、長いオプション名は\-\-を前に付けず、等号=を使わずに使用する必要があります。
.SS ログ、日付、時刻の書式
.TP 
\fB\-\-time\-format=<時刻書式>\fP
時刻書式変数は空白1つ分に続いて、定義済み書式名（後述のオプションを参照）ないし通常の文字と特殊書式指定子のあらゆる組み合わせのいずれかを含むログ書式時刻を指定します。
.IP
全てパーセント符号 (%) から始まります。
`man strftime`を参照してください。
\fI%Tや%H:%M:%S\fPといったものです。
.IP
なお、タイムスタンプがマイクロ秒で与えられているならば\fI%f\fPは時刻書式として用いられねばなりません。
タイムスタンプがミリ秒で与えられているならば\fI%*\fPは時刻書式として用いられねばなりません。
.TP 
\fB\-\-date\-format=<日付書式>\fP
日付書式変数は空白1つに続き、定義済み書式名（後述のオプションを参照）ないし通常の文字と特殊な書式指定子のあらゆる組合せを含むログ書式時刻を指定します。
.IP
全てパーセント (%) 符号から始まります。
`man strftime`を参照してください。
\fI%Y\-%m\-%d\fPといったものです。
.IP
タイムスタンプがマイクロ秒で与えられているならば\fI%f\fPが日付書式として使われなければなりません。
タイムスタンプがミリ秒で与えられているならば\fI%*\fPが日付書式として使われなければなりません。
.TP 
\fB\-\-datetime\-format=<日時書式>\fP
日付と時刻の書式について、
2つの変数が単一のオプションに組み合わさったものです。
これによりリクエストからタイムゾーンを取得し、
出力用に他のタイムゾーンに変換することができます。
\fI\-\-tz=<タイムゾーン>\fPを参照してください。
.IP
全てパーセント (%) 符号から始まります。
`man strftime`を参照してください。
例として\fI%d/%b/%Y:%H:%M:%S %z\fPを挙げます。
.IP
なお\-\-datetime\-formatが使われている場合、日付と時刻のフィールドを表現するためにログ書式変数に\fI%x\fPが渡されなければなりません。
.TP 
\fB\-\-log\-format=<ログ書式>\fP
ログ書式変数は空白1つないしタブ区切り用の\fI\\et\fPに続いてログ書式文字列を指定します。

なお書式中に空白があった場合、文字列は単一ないし二重引用符で囲まれていなくてはなりません。
内部の引用符はエスケープされている必要があります。
.IP
生のログ、日付、時刻書式を指定するのに加えて、
便宜上以下の定義済みログ書式名から、
どれでもログ、日付、時刻書式変数に与えることができます。
GoAccessでは、
ある変数にある定義済みの名前を、
別の変数に別の定義済みの名前を、
というように扱うこともできます。
.IP
  COMBINED     \- Combined Log Format
  VCOMBINED    \- 仮想ホスト付きCombined Log Format
  COMMON       \- Common Log Format
  VCOMMON      \- 仮想ホスト付きCommon Log Format
  W3C          \- W3C Extended Log File Format
  SQUID        \- Native Squid Log Format
  CLOUDFRONT   \- Amazon CloudFront Web Distribution
  CLOUDSTORAGE \- Google Cloud Storage
  AWSELB       \- Amazon Elastic Load Balancing
  AWSS3        \- Amazon Simple Storage Service (S3)
  AWSALB       \- Amazon Application Load Balancer
  CADDY        \- CaddyのJSON構造形式（local/info形式）
  TRAEFIKCLF   \- TraefikのCLFフレーバー
.IP
\fINote:\fP Generally, you need quotes around values that include white spaces,
commas, pipes, quotes, and/or brackets. Inner quotes must be escaped.
.IP
\fI補足：\fPデータをGoAccessにパイプで流し込むときはログ、日付、時刻設定ダイアログは質問されないので、予め設定ファイルかコマンドラインで定義しておく必要があります。
.IP
\fINote:\fP The default GoAccess format for CADDY is the 'local/info'
format. Nevertheless, if needed, you have the option to utilize a custom
GoAccess log format to match your particular configuration.
.SS 利用者用対話的オプション
.TP 
\fB\-c \-\-config\-dialog\fP
プログラムの開始時にログ、日付、時刻の設定窓を開きます。
cursesが初期化されているとき限定です。
.TP 
\fB\-i \-\-hl\-header\fP
活性化された端末パネルを色付けします。
.TP 
\fB\-m \-\-with\-mouse\fP
主な端末ダッシュボードでマウス対応を有効にします。
.TP 
\fB\-\-\-color=<前景:背景[属性, パネル]>\fP
端末出力用の独自の色を指定します。

\fIColor Syntax\fP
  定義 空白またはタブ 前景色#:背景色# [属性,パネル]

 FG# = 前景色 [\-1...255]（\-1 = 端末既定の色）
 BG# = 背景色 [\-1...255]（\-1 = 端末既定の色）

おまけとして色属性を適用することができます（複数の属性はコンマ区切になります）。
例えば\fIbold\fP、\fIunderline\fP、\fInormal\fP、\fIreverse\fP、\fIblink\fPです。

必要に応じてパネル毎に独自の色を適用することができます。
つまりリクエストパネルの指標は色Aのものにしつつ、
ブラウザパネルの同じ指標は色Bのものにする、といったことができます。

\fI利用できる色の定義：\fP
  COLOR_MTRC_HITS
  COLOR_MTRC_VISITORS
  COLOR_MTRC_DATA
  COLOR_MTRC_BW
  COLOR_MTRC_AVGTS
  COLOR_MTRC_CUMTS
  COLOR_MTRC_MAXTS
  COLOR_MTRC_PROT
  COLOR_MTRC_MTHD
  COLOR_MTRC_HITS_PERC
  COLOR_MTRC_HITS_PERC_MAX
  COLOR_MTRC_VISITORS_PERC
  COLOR_MTRC_VISITORS_PERC_MAX
  COLOR_PANEL_COLS
  COLOR_BARS
  COLOR_ERROR
  COLOR_SELECTED
  COLOR_PANEL_ACTIVE
  COLOR_PANEL_HEADER
  COLOR_PANEL_DESC
  COLOR_OVERALL_LBLS
  COLOR_OVERALL_VALS
  COLOR_OVERALL_PATH
  COLOR_ACTIVE_LABEL
  COLOR_BG
  COLOR_DEFAULT
  COLOR_PROGRESS

カラースキームの例は設定ファイルを参照してください。
.TP 
\fB\-\-color\-scheme=<1|2|3>\fP
カラースキームから選択します。
\fI1\fPは既定の灰色のスキームです。
\fI2\fPは緑色のスキームです。
\fI3\fPはMonokaiのスキームです（端末が256色に対応しているときのみ現れます）。
.TP 
\fB\-\-crawlers\-only\fP
クローラー（ボット）のみ解析と表示を行います。
.TP 
\fB\-\-html\-custom\-css=<自前のCSSファイルへのパス>\fP
HTMLレポートで読み込まれる自前のCSSファイルパスを指定します。
.TP 
\fB\-\-html\-custom\-js=<自前のJavaScriptファイルへのパス>\fP
HTMLレポートで読み込まれる自前のJSファイルパスを指定します。
.TP 
\fB\-\-html\-report\-title=<題名>\fP
HTMLレポートページに題名とヘッダを設定します。
.TP 
\fB\-\-html\-refresh=<秒数>\fP
HTMLレポートをX秒毎に再描画します。
値は1から60秒の間でなくてはなりません。
既定ではHTMLレポートを1秒毎に再描画するように設定されています。
.TP 
\fB\-\-html\-prefs=<JSON>\fP
HTMLレポートの既定の設定を加えます。
HTML設定を含む妥当なJSONオブジェクトを与えてください。
それぞれのパネルプロットを自前のものにすることができます。
以下の例をご覽ください。
.IP
\fI補足：\fP渡すJSONオブジェクトは1行のJSON文字列である必要があります。
例えば次の通りです。
.IP
.nf
\-\-html\-prefs='{"theme":"bright","perPage":5,"layout":"horizontal","showTables":true,"visitors":{"plot":{"chartType":"bar"}}}'
.fi
.TP 
\fB\-\-json\-pretty\-print\fP
タブと改行を使ってJSON出力の書式を整えます。
.IP
\fI補足：\fPWebSocketのペイロードが遥かに増大するため、
実時間HTMLレポートを出力する際は推奨されません。
.TP 
\fB\-\-max\-items=<数>\fP
パネル毎に表示する項目の最大数。
最大値は1からnまでの間にできます。
.IP
\fI補足：\fPCSV及びJSON出力のみでパネル毎の既定値の366
（実時間HTMLレポートでは50）項目より大きい最大数が許されます。
.TP 
\fB\-\-no\-color\fP
色付きの出力にします。
これは彩色に対応していない端末では既定の出力です。
.TP 
\fB\-\-no\-column\-names\fP
端末の出力で列名を書き入れません。
既定ではパネル毎にそれぞれの使える指標について列名が表示されます。
.TP 
\fB\-\-no\-csv\-summary\fP
CSVの出力で指標の概要を無効にします。
.TP 
\fB\-\-no\-progress\fP
進行中の指標 [リクエスト合計/毎秒リクエスト] を無効にします。
.TP 
\fB\-\-no\-tab\-scroll\fP
タブが押下されていたり、
パネルが数字のキーを使って選択されていたりするときは
パネルを通じてのスクロールを無効にします。
.TP 
\fB\-\-no\-html\-last\-updated\fP
HTMLの生成されたレポート中に表示される最後に更新されたフィールドが現れないようにします。
.TP 
\fB\-\-no\-parsing\-spinner\fP
進行中の指標とスピナーの解析を表示しません。
.TP 
\fB\-\-tz=<timezone>\fP
レポートの日付、時刻データを与えられたタイムゾーンで出力します。
正統なタイムゾーン名を使うことに注意してください。
例えば\fIEurope/Berlin\fPや\fIAmerica/Chicago\fPや\fIAfrica/Cairo\fPといったようにです。
不正なタイムゾーン名が与えられると出力はGMTになります。
日付、時刻書式で適切にタイムゾーンを指定するには\fI\-\-datetime\-format\fPを参照してください。
.SS サーバーオプション
.P
\fI補足：\fP 生の実時間データがもたらされるのはWebSocketサーバーだけです。
WebServer自体ではありません。
レポートのHTMLファイルにアクセスするには、やっぱり自前のHTTPサーバーが必要になります。
生成されたレポートをドキュメントルートディレクトリに置いてブラウザでHTMLファイルを開いてください。
ブラウザはここでセットアップできるws\-serverへの別のWebSocket接続を開いて、
ダッシュボードを更新された状態に保つことができます。
.TP 
\fB\-\-addr\fP
サーバーに束縛するIPアドレスを指定します。
指定しなければ0.0.0.0に束縛します。
.IP
大抵はアドレスを指定する必要はないのですが、
意図的にサーバー内で異なるアドレスにサーバーを束縛したいときはその限りではありません。
.TP 
\fB\-\-daemonize\fP
GoAccessをデーモンとして走らせます（\fB\-\-real\-time\-html\fPが有効になっているときのみ）。
.IP
補足：GoAccessの設定全体を通じて絶対パスを使うことは大切です。
.TP 
\fB\-\-user\-name=<利用者名>\fP
GoAccessを特定のユーザーとして走らせます。
.IP
補足：ユーザーないしユーザーのグループが、
入出力ファイルやその他に必要なファイルにアクセスできることを確かめておくことは大事です。
ユーザーが属する他のグループは無視されます。
そういったわけで、
ユーザーがSSL証明書にアクセスできることはそうそうないでしょうから、
GoAccessはSSLプロキシの背後で走らせることをお勧めします。
.TP 
\fB\-\-origin=<URL>\fP
クライアントがWebSocketハンドシェイクで必ず指定されたオリジンヘッダーを送るようにします。
.TP 
\fB\-\-pid\-file=<GoAccessのpidファイルへのパス>\fP
\-\-daemonizeオプションと一緒に使ったときにデーモンのPIDをファイルに書き込みます。
.TP 
\fB\-\-port=<ポート>\fP
使うポートを指定します。
既定ではGoAccessのWebSocketサーバーは7890ポートで待ち受けます。
.TP 
\fB\-\-real\-time\-html\fP
実時間HTML出力を有効にします。
.IP
GoAccessは自前のWebSocketサーバーを使ってサーバーからクライエントへのデータを送信します。
WebSocketサーバーの仕組みの詳細については http://gwsocket.io を参照してください。
.TP 
\fB\-\-ws\-url=<[scheme://]url[:port]>\fP
WebSocketサーバーが応答するURLです。
これはクライアント側でWebSocket構築子に与えられるURLです。
.IP
おまけとしてWebSocketのURIスキームを指定することができます。
暗号化されていなかったりされていたりする\fIws://\fPや\fIwss://\fPといったものです。
例：\fIwss://goaccess.io\fP
.IP
GoAccessがプロキシの背後で走っている場合、
ホストにコロンとポートを続けて指定することによって、
クライアント側で異なるポートに接続するように設定することができます。
例えば\fIgoaccess.io:9999\fPです。
.IP
既定では生成されたレポートのホスト名に接続を試みます。
GoAccessがリモートサーバーで走っている場合、リモートサーバーのホストはここで指定されるべきです。
また、妥当なホストになっていてHTTPアドレスになって「いない」ことを必ず確認してください。
.TP 
\fB\-\-ping\-interval=<秒数>\fP
指定された秒数の間隔でWebSocketの死活監視を有効にします。
これにより切断されて放置されたままの接続を防ぐことができます。
.TP 
\fB\-\-fifo\-in=<ファイルへのパス>\fP
名前付きパイプ (FIFO) を作り、与えられたファイルパスから読むようにします。
.TP 
\fB\-\-fifo\-out=<ファイルへのパス>\fP
名前付きパイプ (FIFO) を作り、与えられたファイルパスに書き込むようにします。
.TP 
\fB\-\-ssl\-cert=<証明書.crt>\fP
TLS/SSL証明書へのパスです。
GoAccessでTLS/SSL対応を有効にするためには\-\-ssl\-certと\-\-ssl\-keyが使用されていることが必要です。

\-\-with\-opensslを使ってconfigureしたときに限定されます。
.TP 
\fB\-\-ssl\-key=<秘密鍵.key>\fP
TLS/SSL秘密鍵へのパスです。
GoAccessでTLS/SSL対応を有効にするためには、\-\-ssl\-certと\-\-ssl\-keyが使用されていることが必要です。

\-\-with\-opensslを使ってconfigureしたときに限定されます。
.SS ファイルオプション
.TP 
\fB\-\fP
解析するログファイルが標準入力から読み込まれます。
.TP 
\fB\-f \-\-log\-file=<ログファイル>\fP
入力ログファイルへのパスを指定します。
設定ファイルで指定されている場合はコマンドラインから\-fで指定されたものよりも優先されます。
.TP 
\fB\-S \-\-log\-size=<バイト数>\fP
ログの大きさをバイトで指定します。
これはログの大きさを明示的に設定できる処理におけるログからパイプを繋いでくるときに便利です。
.TP 
\fB\-l \-\-debug\-file=<デバッグファイル>\fP
全てのデバッグ文言を指定されたファイルに送ります。
.TP 
\fB\-p \-\-config\-file=<設定ファイル>\fP
独自に使用する設定ファイルを指定します。
設定されている場合、（もしあっても）大域的な設定ファイルより優先されます。
.TP 
\fB\-\-external\-assets\fP
外部のJS/CSSファイルにHTMLアセットを出力します。
Content Security Policy (CSP) を設定している場合に優れます。
report.htmlファイルと同じディレクトリに2つの分離されたファイル\fIgoaccess.js\fPと\fIgoaccess.css\fPを作成します。
.TP 
\fB\-\-invalid\-requests=<ファイル名>\fP
不正なリクエストを指定されたファイルにログ出力します。
.TP 
\fB\-\-unknowns\-log=<ファイル名>\fP
不明なブラウザとOSを指定されたファイルにログ出力します。
.TP 
\fB\-\-no\-global\-config\fP
大域的な設定ファイルを読み込みません。
\fI\-\-sysconfdir=ディレクトリへのパス\fPと指定されない限り、
このディレクトリは通常/usr/local/etcです。
既定の設定ファイルを見付けるためには\-\-dcfオプションを参照してください。
.SS 解析オプション
.TP 
\fB\-a \-\-agent\-list\fP
ホスト毎のユーザーエージェントの一覧を有効にします。
高速な解析の上ではこのフラグを有効にしないでください。
.TP 
\fB\-d \-\-with\-output\-resolver\fP
HTMLないしJSON出力におけるIPリゾルバを有効にします。
.TP 
\fB\-e \-\-exclude\-ip=<IPまたはIPの範囲>\fP
IPv4やIPv6を計上の対象から除外します。
アクセスログのデータ処理中でのみ適用でき、永続化されたデータは除外されません。
範囲についても、IPの間にダッシュを使う（開始\-終了）ことで含められます。
.IP
\fI例：\fP
  exclude\-ip 127.0.0.1
  exclude\-ip 192.168.0.1\-192.168.0.100
  exclude\-ip ::1
  exclude\-ip 0:0:0:0:0:ffff:808:804\-0:0:0:0:0:ffff:808:808
.TP 
\fB\-j \-\-jobs=<1\-6>\fP
This specifies the number of parallel processing threads to be used during
the execution of the program. It determines the degree of concurrency when
analyzing log data, allowing for parallel processing of multiple tasks
simultaneously. It defaults to 1 thread. It's common to set the number of
jobs based on the available hardware resources, such as the number of CPU
cores.
.TP 
\fB\-H \-\-http\-protocol=<yes|no>\fP
HTTPリクエストのプロトコルを設定したり外したりします。
こうすることによりリクエストされたプロトコルと実際のリクエストが含まれたリクエストキーが作られるようになります。
.TP 
\fB\-M \-\-http\-method=<yes|no>\fP
HTTPリクエストのメソッドを設定したり外したりします。
これによりリクエストのメソッドと実際のリクエストを含むリクエストキーが作られるようになります。
.TP 
\fB\-o \-\-output=<ファイルへのパス.[json|csv|html]>\fP
与えられた以下のファイルと対応する出力形式用の拡張子のうちの1つに標準出力への出力を書き込みます。
.IP
  /path/file.csv \- Comma\-separated values (CSV)
  /path/file.json \- JSON (JavaScript Object Notation)
  /path/file.html \- HTML
.TP 
\fB\-q \-\-no\-query\-string\fP
リクエストのクエリ文字列を無視します。
つまり、www.google.com/page.htm?query => www.google.com/page.htm です。
.IP
\fI補足：\fPクエリ文字列を削除するとメモリ消費量が大幅に減る可能性があります。
特にタイムスタンプ付きのリクエストではそうです。
.TP 
\fB\-r \-\-no\-term\-resolver\fP
端末出力でIPリゾルバを無効にします。
.TP 
\fB\-\-444\-as\-404\fP
非標準的なステータスコードである444を404として扱います。
.TP 
\fB\-\-4xx\-to\-unique\-count\fP
4xxクライアントエラーを固有訪問者に加えます。
.TP 
\fB\-\-anonymize\-ip\fP
クライアントIPアドレスを匿名化します。
IP匿名化オプションはIPv4利用者IPアドレスの末尾オクテットとIPv6アドレスの末尾80ビットをゼロに設定します。
例：192.168.20.100 => 192.168.20.0
例：2a03:2880:2110:df07:face:b00c::1 => 2a03:2880:2110:df07::
.IP
\fINote:\fP This deactivates \-a.
.TP 
\fB\-\-chunk\-size=<256\-32768>\fP
This determines the number of lines that form a chunk. This parameter
influences the size of the data processed concurrently by each thread,
allowing for parallelization of the file reading and processing tasks. The
value of chunk\-size affects the efficiency of the parallel processing and
can be adjusted based on factors such as system resources and the
characteristics of the input data.

.IP
Low Values: If chunk\-size is set too low, it might result in inefficient
processing. For instance, if each chunk contains a very small number of
lines, the overhead of managing and coordinating parallel processing might
outweigh the benefits.

.IP
Large Values: Conversely, if chunk\-size is set too high, it could lead to
resource exhaustion. Each chunk represents a portion of data that a thread
processes in parallel. Setting chunk\-size to an excessively large value
might cause memory issues, particularly if there are many parallel threads
running simultaneously.
.TP 
\fB\-\-anonymize\-level\fP
匿名化水準を指定します。
1 => 既定、2 => 強力、3 => 神経質
.TS
allbox;
lb lb lb lb
l l l l.
隠れるビット数	レベル1	レベル2	レベル3
T{
\fBIPv4\fP
T}	8	16	24
T{
\fBIPv6\fP
T}	64	80	96
.TE

.TP 
\fB\-\-all\-static\-files\fP
クエリ文字列を含む静的ファイルを含めます。
例：/fonts/fontawesome\-webfont.woff?v=4.0.3
.TP 
\fB\-\-browsers\-file=<パス>\fP
既定でGoAccessはブラウザとクローラーの「必須ないし基礎的な」厳選された一覧を解析します。
もし追加のブラウザを加える必要があればこのオプションを使ってください。
ブラウザやクローラーやフィードなどの追加の区切られた一覧を含めてください。
例としてはconfig/browsers.listや
https://raw.githubusercontent.com/allinurl/goaccess/master/config/browsers.list
を参照してください。
.TP 
\fB\-\-date\-spec=<date|hr|min>\fP
日時の厳密さに関して、日付（既定）、何時かを表示する時、
何分かを表示する分、のうちいずれかを日付に設定します。
.IP
これは訪問者数パネルで使われます。
時水準で訪問者を把握するのに便利です。
例えば時指定ではトラフィックを18/Dec/2010:19になり、
分指定では18/Dec/2010:19:59が表示されます。
.TP 
\fB\-\-double\-decode\fP
二重に符号化された値を復号化します。
これにはユーザーエージェント、リクエスト、リファラが含まれます。
.TP 
\fB\-\-enable\-panel=<パネル>\fP
与えられたパネルについて解析と表示を有効にします。
.IP
\fI利用できるパネル：\fP
  VISITORS
  REQUESTS
  REQUESTS_STATIC
  NOT_FOUND
  HOSTS
  OS
  BROWSERS
  VISIT_TIMES
  VIRTUAL_HOSTS
  REFERRERS
  REFERRING_SITES
  KEYPHRASES
  STATUS_CODES
  REMOTE_USER
  CACHE_STATUS
  GEO_LOCATION
  MIME_TYPE
  TLS_TYPE
.TP 
\fB\-\-fname\-as\-vhost=<正規表現>\fP
ログファイル名に仮想ホストを使います。
ファイル名から仮想ホストを抽出するためにPOSIX正規表現が渡されます。
例：\fI\-\-fname\-as\-vhost='[a\-z]*.[a\-z]*'\fPはawesome.com.log => awesome.com
と抽出するのに使えます。
.TP 
\fB\-\-hide\-referrer=<探しもの>\fP
リファラを隠しつつ計上はします。
探しものの箇所ではワイルドカードが使えます。
つまり *.bing.com です。
.TP 
\fB\-\-hour\-spec=<hr|min>\fP
時刻指定を時（既定）ないし分のいずれかに設定します。
後者では時に1/10時間が後置されます。
.IP
これは時間分布パネルで使われます。
サーバーで特定の時刻でトラフィックのピークを把握するのに役立ちます。
.TP 
\fB\-\-ignore\-crawlers\fP
クローラーを計上から外します。
.TP 
\fB\-\-unknowns\-as\-crawlers\fP
不明なOSとブラウザをクローラーとして分類します。
.TP 
\fB\-\-ignore\-panel=<パネル>\fP
与えられたパネルについて解析と表示から外します。
.IP
\fI利用できるパネル：\fP
  VISITORS
  REQUESTS
  REQUESTS_STATIC
  NOT_FOUND
  HOSTS
  OS
  BROWSERS
  VISIT_TIMES
  VIRTUAL_HOSTS
  REFERRERS
  REFERRING_SITES
  KEYPHRASES
  STATUS_CODES
  REMOTE_USER
  CACHE_STATUS
  GEO_LOCATION
  MIME_TYPE
  TLS_TYPE
.TP 
\fB\-\-ignore\-referrer=<リファラ>\fP
リファラを計上から外します。
ワイルドカードが使えます。
例：\fI*.domain.com\fP \fIww?.domain.*\fP
.TP 
\fB\-\-ignore\-statics=<req|panel>\fP
静的ファイルのリクエストを無視します。

\fIreq\fP
  妥当なリクエスト由来のリクエストのみ無視します

\fIpanels\fP
  パネル由来のリクエストを無視します

  なおこれらはリクエストの総計に計上されます。
.TP 
\fB\-\-ignore\-status=<コード>\fP
1つ以上のステータスコードを解析と表示から外します。
複数のステータスコードについては、このオプションを複数回使用してください。
.TP 
\fB\-\-keep\-last=<日数>\fP
ストレージに指定された日数分保持します。
これによりストレージの周回表が巡回されます。
例：直近7日間のみを保持して表示します。
.TP 
\fB\-\-no\-ip\-validation\fP
クライアントのIPの検証を無効化します。
ログ出力される前にIPアドレスが粉飾されている場合に便利です。
それでもログには\fI%h\fPの場所取りがなされている必要があり、大抵は解決されたIPです。
例：\fIord37s19\-in\-f14.1e100.net.\fP
.TP 
\fB\-\-no\-strict\-status\fP
HTTPステータスコードの検証を無効にします。
対象との接続が確立され対象が応答を送ったときのみにこの値を記録するサーバーもあります。
そうでない場合\-として記録されます。
.TP 
\fB\-\-num\-tests=<数値>\fP
与えられたログ・日付・時刻の書式に照らし合わせるアクセスログからの行数。
既定では解析器は10行に対して検査するように設定されています。
0に設定したときは解析器は一部の行のみの検査ではなくアクセスログ全体を解析します。
\fI<number>\fPに到達するまでに与えられたログ・日付・時刻の書式がその行に照合したら、
解析器はそのログを妥当と判断し、
そうでなければGoAccessはEXIT_FAILUREを返して関係するエラー文言を表示します。
.TP 
\fB\-\-process\-and\-exit\fP
ログを解析しデータ出力することなく終了します。
ファイルや端末に出力することなくディスク上のデータベースに新規データを加えたいだけのときに便利です。
.TP 
\fB\-\-real\-os\fP
実際のOS名を表示します。
例えばWindows XP、Snow Leopardです。
.TP 
\fB\-\-sort\-panel=<パネル,フィールド,順序>\fP
初期の読込でパネルを整列します。
整列オプションは読点区切りです。
オプションは、パネル,指標,順序、の形式です。
.IP
\fI使える指標：\fP
  BY_HITS     \- ヒット数により整列
  BY_VISITORS \- 正味訪問者で整列
  BY_DATA     \- データで整列
  BY_BW       \- 帯域幅で整列
  BY_AVGTS    \- 平均提供時間で整列
  BY_CUMTS    \- 累積提供時間で整列
  BY_MAXTS    \- 最大提供時間で整列
  BY_PROT     \- HTTPプロトコルで整列
  BY_MTHD     \- HTTPメソッドで整列
.IP
\fI使える順番：\fP
  ASC
  DESC
.TP 
\fB\-\-static\-file=<拡張子>\fP
静的ファイルの拡張子を追加します。
例：\fI.mp3\fP
拡張子は大文字小文字を区別しません。
.SS 地理的位置のオプション
.TP 
\fB\-g \-\-std\-geoip\fP
メモリ使用量を抑えるため標準的なGeoIPデータベースにします。
.TP 
\fB\-\-geoip\-database=<地理情報ファイル>\fP
GeoLiteCity.datのようなGeoIPデータベースファイルへのパスを指定します。

GeoIP2を使用している場合、
MaxMind.comからGeoLite2ないしCountryのデータベースをダウンロードし、
データベースを指定するために\-\-geoip\-databaseオプションを使う必要があるでしょう。
過去のGeoIP用にデータベースファイルを更新することもでき、
そのファイルはMaxMind.comのGeoLite Legacy Databasesにあります。
IPv4とIPv6のファイルも同様に対応済みです。
更新されたDBのURLについては、既定のGoAccess設定ファイルを参照してください。

\fI補足：\fP \-\-geoip\-city\-dataは\-\-geoip\-databaseの別名です。
.SS 他のオプション
.TP 
\fB\-h \-\-help\fP
ヘルプ。
.TP 
\fB\-s \-\-storage\fP
B+木やハッシュのような、現在のストレージメソッドを表示します。
.TP 
\fB\-V \-\-version\fP
バージョン情報を表示して終了します。
.TP 
\fB\-\-dcf\fP
`\-p`が使われていない場合既定の設定ファイルのパスを表示します。
.SS 永続ストレージオプション
.TP 
\fB\-\-persist\fP
解析されたデータをディスクに永続化します。
データベースファイルが存在するときはファイルは上書きされます。
これは最初のデータベースに対して設定されます。
後述の例を参照してください。
.TP 
\fB\-\-restore\fP
ディスクから以前格納されたデータを読み込みます。
永続化されたデータのみを読む場合、データベースファイルが存在している必要があります。
\fI\-\-persist\fPと後述の例を参照してください。
.TP 
\fB\-\-db\-path=<ディレクトリ>\fP
ディスク上のデータベースファイルが保管されているパスです。
既定値は\fI/tmp\fPディレクトリです。

.SH 独自のログ・日付書式
GoAccessは理想的にはどんなwebのログ書式も解析できます。
.P
予め定義されたオプションには
Common Log Format (CLF)、
Combined Log Format (XLF/ELF)、
Amazon CloudFront (Download Distribution)、
Google Cloud Storage、
W3C形式 (IIS) が含まれます。
前2者は仮想ホスト付きのものもあります。
.P
GoAccessはどんな独自の書式文字列も受け付けます。
.P
ログ書式を設定するには2つの方法があります。
最も簡単なのはGoAccessを\fI\-c\fP付きで走らせて、
設定ウィンドウから指示に随って入力することです。
他に~/.goaccessrcや%sysconfdir%以下で設定することもできます。
.IP time\-format
\fItime\-format\fP変数は空白1つに続いてログの書式の時刻を指定します。
これには通常の文字と特殊な書式指定子の組み合わせが含まれます。
指定子は全てパーセント記号 (%) 始まりです。
`man strftime`を参照してください。
\fI%Tや%H:%M:%Sなどがあります。\fP
.IP
\fI補足：\fPタイムスタンプがマイクロ秒で与えられているとき、
\fI%f\fPは\fItime\-format\fPとして使われていなければなりません。
またタイムスタンプがミリ秒で与えられているときは、
\fI%f\fPは\fI%*\fPとして使われなければなりません。
.IP date\-format
\fIdate\-format\fP変数には空白1つが続き、
ログの書式の日付を指定します。
この書式には通常の文字と特殊な書式の指定子のあらゆる組み合わせを含められます。
指定子は全てパーセント記号 (%) 始まりです。
`man strftime`を参照してください。
例えば\fI%Y\-%m\-%dです。\fP
.IP
\fI補足：\fPタイムスタンプがマイクロ秒で与えられているとき、
\fI%f\fPは\fIdate\-format\fPとして使われなければなりません。
またタイムスタンプがミリ秒で与えられているときは\fI%f\fPは\fI%*\fPとして使われなければなりません。
.IP log\-format
\fIlog\-format\fP変数には空白1つないし\fI\et\fPが続き、ログ書式の文字列を指定します。
.IP %x
\fItime\-format\fPと\fIdate\-format\fP変数に照合する日付と時刻のフィールドです。
これは与えられたタイムスタンプや日付と時刻が、
日付と時刻が2つの分離した変数ではなく、
単一の文字列（例：1501647332や20170801235000）として結合されているときに使われます。
.IP %t
\fItime\-format\fP変数に照合する時刻フィールドです。
.IP %d
\fIdate\-format\fP変数に照合する日付フィールドです。
.IP %v
リクエストに応対するサーバー（仮想ホスト）の正統なServer Nameです。
.IP %e
これはHTTP認証により決定された文書を要求した人物のユーザーIDです。
.IP %C
サーバーが提供するオブジェクトのキャッシュ状態です。
.IP %h
ホスト（クライアントIPアドレスで、IPv4ないしIPv6のいずれかです）
.IP %r
クライアントからの要求の行です。
解析できるようにするため要求の周囲の特定の区切文字
（単一引用符、二重引用符、その他諸々）が必要です。
さもなければ%m %U %Hといった特殊な書式指定子の組み合わせを使わねばなりません。
.IP %q
検索文字列です。
.IP %m
リクエストメソッドです。
.IP %U
リクエストされたURLのパスです。

\fI補足：\fPクエリ文字列が%Uにあるとき、
\fI%q\fPを使う必要はありません。
しかしURLパスが何らクエリ文字列を含んでいなければ、
\fI%q\fPを使うことでクエリ文字列をリクエストの後に付けることができます。
.IP %H
リクエストされたプロトコルです。
.IP %s
サーバーがクライアントに送り返すステータスコードです。
.IP %b
クライアントに返されるオブジェクトの大きさです。
.IP %R
「リファラ」のHTTPリクエストヘッダです。
.IP %u
ユーザーエージェントのHTTPリクエストヘッダです。
.IP %K
接続に選ばれたTLS暗号設定です（Apache LogFormatでの%{SSL_PROTOCOL}xです）。
.IP %k
接続に選ばれたTLS暗号設定です（Apache LogFormatでの%{SSL_CIPHER}xです）。
.IP %M
リクエストされたリソースのMIME種別です（Apache LogFormatでの%{Content\-Type}oです）。
.IP %D
リクエストに応対するまでに掛かった時間であり、10進整数のミリ秒で指定します。
.IP %T
リクエストに応対するのに掛かった時間で、ミリ秒精度の秒単位で指定します。
.IP %L
リクエストに応対するのに掛かった時間で、10進整数のミリ秒で指定します。
.IP %n
リクエストに応対するまでに掛かった時間であり、ミリ秒で指定します。
.IP %^
このフィールドを無視します。
.IP %~
空白でない (!isspace) 文字が見付かるまでログ文字列を読み進めます。
.IP ~h
X\-Forwarded\-For (XFF) フィールド中のホスト
（クライアントIPアドレスで、IPv4ないしIPv6のいずれか）です。

ホスト指定子の前にチルダが付いたものとなっている特別な指定子を使います。
XFFフィールドを区切る文字が続きます。
この区切り文字は中括弧で囲まれます。
つまり"~h{, }"のようになります。

例えば"~h{, }"はコンマと空白（二重引用符で囲まれたところ）で区切られた
"11.25.11.53, 17.68.33.17"フィールドを解析するために使われます。

.TS
allbox;
lb lb
l l.
XFFフィールド	指定子
T{
\fB\[dq]192.1.2.3,\fP\ 192.68.33.17,\ 192.1.1.2\[dq]
T}	\[dq]~h{, }\[dq]
T{
\fB\[dq]192.1.2.12\[dq],\ \[dq]192.68.33.17\[dq]\fP
T}	~h{\[dq], }
T{
\fB192.1.2.12,\ 192.68.33.17\fP
T}	~h{, }
T{
\fB192.1.2.14\ 192.68.33.17\ 192.1.1.2\fP
T}	~h{ }
.TE


.P
\fI補足：\fPGoAccessで提供時間の累計と最大値の平均を取得するためには、
webサーバーで応答時間のログ出力を開始する必要があります。
Nginxではログ書式に\fI$request_time\fPを追加でき、
Apacheでは\fI%D\fPを追加できます。
.P
\fI重要：\fP複数の提供時間の指定子が同時に使われた場合、
書式文字列で指定された最初のオプションが他の指定子よりも優先されます。
.P
GoAccessには以下のフィールドが\fI必須\fPです。
.IP
\fI%h\fP 妥当なIPv4ないしIPv6
.IP
\fI%d\fP 妥当な日付
.IP
\fI%r\fP リクエスト
.SH 対話的メニュー
.IP F1またはh
メインのヘルプです。
.IP F5
メインのウィンドウを再描画します。
.IP q
プログラムまたは現在のウィンドウを終了するか、活性のモジュールを折り畳みます。
.IP oまたはエンター
選択されたモジュールを展開ないしウィンドウを開きます。
.IP "0\-9とShift + 0"
選択されたモジュールを活性に設定します
.IP j
展開されたモジュール内でスクロールを下に移動します。
.IP k
展開されたモジュール内でスクロールを上に移動します。
.IP c
カラースキームを設定したり変更したりします。
.IP タブ
モジュールの巡回を先に進めます。現在の活性なモジュールから開始します。
.IP シフトキーとタブ
モジュールの巡回を後ろに戻します。現在の活性なモジュールから開始します。
.IP ^f
活性モジュールの中で1画面スクロールを前に進めます。
.IP ^b
活性モジュールの中で1画面スクロールを後ろに戻します。
.IP s
活性モジュールの並び替えオプションです
.IP /
全てのモジュールを検索します（正規表現が使えます）
.IP n
全てのモジュールを通じて次の発生位置を見つけ出します。
.IP g
最初の項目や画面の一番上に移動します。
.IP G
最後の項目や画面の一番下に移動します。
.SH 例
\fI補足：\fPデータをGoAccessにパイプで流し込むときはログ、日付、時刻設定ダイアログは質問されないので、予め設定ファイルかコマンドラインで定義しておく必要があります。

.SS 異なる出力
.P
端末に出力して対話的なレポートを生成するには以下のようにします。
.IP
# goaccess access.log
.P
HTMLレポートを生成するには以下のようにします。
.IP
# goaccess access.log \-a \-o report.html
.P
JSONでレポートを生成するには以下のようにします。
.IP
# goaccess access.log \-a \-d \-o report.json
.P
CSVファイルを生成するには以下のようにします。
.IP
# goaccess access.log \-\-no\-csv\-summary \-o report.csv
.P
GoAccessは実時間の絞り込みと解析を行う上で、
非常に柔軟性が高い側面もあります。
例えばgoaccessが起動したあとのログを監視することによって素早く問題を診断できます。
.IP
# tail \-f access.log | goaccess \-
.P
そしてさらに良くするために、
実時間解析を保存するためのパイプを空けたままを維持しつつ、
\fItail \-f\fPと\fIgrep、awk、sedなど\fPのようなパターン照合ツールを活用することができます。
.IP
# tail \-f access.log | grep \-i \-\-line\-buffered 'firefox' | goaccess
\-\-log\-format=COMBINED \-
.P
もしくはパイプを開きフィルタを適用しつつ、
ファイルの冒頭から解析するにはこのようにします。
.IP
# tail \-f \-n +0 access.log | grep \-i \-\-line\-buffered 'firefox' | goaccess
\-\-log\-format=COMBINED \-o report.html \-\-real\-time\-html \-
.P
もしくはログの日時のタイムゾーンを異なるタイムゾーン、
例えばEurope/Berlin、に変換するには次のようにします。
.IP
# goaccess access.log \-\-log\-format='%h %^[%x] "%r" %s %b "%R" "%u"'
\-\-datetime\-format='%d/%b/%Y:%H:%M:%S %z' \-\-tz=Europe/Berlin \-\-date\-spec=min
.SS 複数のログファイル
.P
GoAccessで複数のログを解析するにはいくつかの方法があります。
最も単純なのはコマンドラインに複数のログファイルを渡すことです。
.IP
# goaccess access.log access.log.1
.P
通常のファイルから読み込みつつパイプからファイルを解析することさえできます。
.IP
# cat access.log.2 | goaccess access.log access.log.1 \-
.P
\fI補足\fPとなりますが、
単一ダッシュがコマンドラインの後ろに付いていることで、
GoAccessにパイプから読み込むことが伝わります。
.P
さらにGoAccessの柔軟性を上げたければ一連のパイプにすることができます。
例として現在のログファイルに加えて、
全ての圧縮されたログファイル\fIaccess.log.*.gz\fPを処理したければ、
次のようにできます。
.IP
# zcat access.log.*.gz | goaccess access.log \-
.P
\fI補足：\fPMac OS Xではzcatではなくgunzip \-cを使ってください。
.SS 実時間HTML出力
.P
GoAccessではHTMLレポートに実時間データを出力することができます。
外部ファイル依存のない単一ファイルからなるため、
HTMLファイルをEメールで送ることさえできるのです。
やったぜ！
.P
実時間HTMLレポートを生成する工程は、
静的なレポートを作る過程と大変似ています。
実時間にするのに必要なのは\-\-real\-time\-htmlだけです。
.IP
# goaccess access.log \-o /usr/share/nginx/html/site/report.html
\-\-real\-time\-html
.P
既定ではGoAccessは生成されたレポートのホスト名を使います。
オプションとしてクライアントのブラウザが接続するURLを指定することができます。
詳細な例は https://goaccess.io/faq を参照してください。
.IP
# goaccess access.log \-o report.html \-\-real\-time\-html \-\-ws\-url=goaccess.io
.P
既定ではGoAccessはポート7890で待ち受けます。
7890以外の別のポートを使うためには以下のように指定することができます
（ポートの穴開けができていることを確かめてください）。
.IP
# goaccess access.log \-o report.html \-\-real\-time\-html \-\-port=9870
.P
またWebSocketサーバーを0.0.0.0以外の別のアドレスに束縛したければ以下のように指定することができます。
.IP
# goaccess access.log \-o report.html \-\-real\-time\-html \-\-addr=127.0.0.1
.P
\fI補足：\fPTLS/SSL接続上で実時間データを出力するには\fI\-\-ssl\-cert=<cert.crt>\fPと\fI\-\-ssl\-key=<priv.key>\fPを使う必要があります。
.SS 日付の扱い
.P
別のパイプの有用な点はwebのログから日付で絞り込むことでしょう。
.P
以下は05/Dec/2010からファイル末尾までの全てのHTTPリクエストを取得します。
.IP
# sed \-n '/05\/Dec\/2010/,$ p' access.log | goaccess \-a \-
.P
または昨日や明日のような相対的な日にちを使うと以下です。
.IP
# sed \-n '/'$(date '+%d\/%b\/%Y' \-d '1 week ago')'/,$ p' access.log |
goaccess \-a \-
.P
日付aから日付bまでの特定の時刻間隔のみを解析したければ以下のようにできます。
.IP
# sed \-n '/5\/Nov\/2010/,/5\/Dec\/2010/ p' access.log | goaccess \-a \-
.P
特定の量のデータのみを保存し容量上で古いものから再利用されている場合は、
特定の日数のみ保持するようにできます。
例えば直近5日間を保持して表示するには次のようにします。
.IP
# goaccess access.log \-\-keep\-last=5
.SS 仮想ホスト
.P
ログに仮想ホスト（サーバーブロック）フィールドがあるものとします。例えば次の通り。
.IP
vhost.com:80 10.131.40.139 \- \- [02/Mar/2016:08:14:04 \-0600] "GET
/shop/bag\-p\-20 HTTP/1.1" 200 6715 "\-" "Apache (internal dummy connection)"
.P
そしてどの仮想ホストに最頻のURLが属しているのかを見るために、仮想ホストをリクエストに加えたいことがあるでしょう。
.IP
awk '$8=$1$8' access.log | goaccess \-a \-
.P
仮想ホストのリストを除外するためには以下のようにできます。
.IP
# grep \-v "`cat exclude_vhost_list_file`" vhost_access.log | goaccess \-
.SS ファイルとステータスコード
.P
リクエストのうち、html、htm、phpなどの閲覧ページなどで、
特定のページを解析するには次のようにします。
.IP
# awk '$7~/.html|.htm|.php/' access.log | goaccess \-
.P
なお\fI$7\fPはログ書式がcommonやcombinedのもの（仮想ホストなし）のリクエストフィールドであり、
ログに仮想ホストが含まれるのであれば代わりに\fI$8\fPを使うことになるでしょう。
注目しているフィールドを確認しておくのが一番です。
例えば次のように。
.IP
# tail \-10 access.log | awk '{print $8}'
.P
または特定のステータスコードを解析するには次のようにします。
ここでは500 (Internal Server Error) を例に挙げます。
.IP
# awk '$9~/500/' access.log | goaccess \-
.SS サーバー
.P
また、GoAccessを低い優先度で走らせたければ次のようにできることは書いておいたほうがよいでしょう。
.IP
# nice \-n 19 goaccess \-f access.log \-a
.P
そしてサーバーにインストールしたくない場合であってもローカルマシンから走らせられます。
.IP
# ssh \-n root@server 'tail \-f /var/log/apache2/access.log' | goaccess \-
.P
補足：SSHには\fI\-n\fPが必要で、
こうすることでGoAccessが標準入力から読むことができます。
またパスフレーズが要求されるとうまく動かないため認証には必ずSSH鍵を使うようにしてください。
.SS 漸進的ログ処理
.P
GoAccessには内部的な容量を通じて漸進的にログを処理してディスクにデータを吐き出す能力があります。
これは以下のように動作します。

.nr step 1 1
.IP \n[step] 3
データセットは最初に\fI\-\-persist\fPで永続化されていなければならず、
それから同じデータセットを\fI\-\-restore\fPを使って読み込むことができます。
.IP \n+[step]
新しいデータが（パイプやログファイルを通じて）渡されたら、元のデータセットに追記します。

.P
補足

GoAccessは処理対象の全てのファイル（ファイルが同じパーティションにあるものとしています）のiノードを把握しており、
それに加えてログからそれぞれのファイルの解析された最後の行数と、
解析された最後の行のタイムスタンプを含むデータスニペットの抽出を行っています。
例：inode:29627417|line:20012|ts:20171231235059

最初にスニペットが解析されたログと照合するか比較し、
もし合っていればログが劇的に変化していないものとします。
例えば末尾の空行が切り詰められていないといったことです。
iノードが現在のファイルに照合しなければ全ての行を解析します。
現在のファイルがiノードに照合した場合ファイルの残りを読み、
解析済みの行数とタイムスタンプを更新します。
もう1つ注意が必要なのは、
タイムスタンプが格納されているタイムスタンプより若いログの行は解析されないということです。

パイプされたデータは最後に読んだ行のタイムスタンプに基づいて扱われます。
例えばタイムスタンプが格納されているものより古いものを見付けるまで、
入ってくる全てのエントリを解析後に無視します。

.P
例えば、
.IP
// 先月のアクセスログ
.br
# goaccess access.log.1 \-\-persist
.P
として、次のように読み込みます。
.IP
// この月のアクセスログを追記し新しいデータを保存します。
.br
# goaccess access.log \-\-restore \-\-persist
.P
（新しいデータを解析することなく）永続化されたデータのみを読むには次のようにします。
.IP
# goaccess \-\-restore
.P
.SH 補足
実時間HTMLレポートのそれぞれの活性パネルには合計360個ないし50個の項目が含まれます。
項目数は\fImax\-items\fPを使って調節できます。
HTML、CSV、JSON出力については1パネルにつき、
366項目の既定値より大きい最大値を入れることができます。
.P
ヒットとはリクエストのことで、
例えば10リクエストは10ヒットと同じです。
特にIP、日付、ユーザーエージェントが同じHTTPリクエストは1つの正味の訪問者と見なします。
.P

ヂュアルスタック対応を有効にしたい場合は、既定の\fI\-\-addr=0.0.0.0\fPの代わりに\fI\-\-addr=::\fPを使ってください。
.P
生成されたレポートはWebSocketサーバーへの再接続を試み、
最初は1秒後でその後は指数関数的な間隔で試行されます。
20回試行は繰り返されます。
.SH バグ
バグを発見したと思ったら \fIgoaccess@prosoftcorp.com\fP まで私にEメールを送るか、
https://github.com/allinurl/goaccess/issues のイシュートラッカーを使ってください。
.SH 作者
Gerardo Orellana <hello@goaccess.io>
詳細や新しいリリースについては https://goaccess.io にお越しください。
